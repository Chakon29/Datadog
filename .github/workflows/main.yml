name: 'Datadog Terraform CI/CD'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      import_monitor:
        description: 'Importar monitor existente'
        required: false
        default: false
        type: boolean
      monitor_resource_path:
        description: 'Ruta al recurso (ej: module.monitor_1.datadog_monitor.VM_GCP_Uso_de_disco_Critical)'
        required: false
        type: string
      monitor_id:
        description: 'ID real del monitor en Datadog a importar'
        required: false
        type: string

env:
  INFRA_PARAMETERS: "monitors.tfvars"
  MAX_RETRIES: 5
  RETRY_INTERVAL: 30

jobs:
  import_monitor:
    name: 'Importar Monitor Existente'
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.import_monitor == 'true' }}
    defaults:
      run:
        working-directory: ./terraform
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.11.4
    
    - name: Initialize
      run: |
        terraform init -input=false
      env:
        TF_VAR_datadog_api_key: ${{ secrets.DATADOG_SERVICE_API_KEY }}
        TF_VAR_datadog_app_key: ${{ secrets.DATADOG_SERVICE_APP_KEY }}
        TF_VAR_datadog_api_url: "https://api.us5.datadoghq.com/"
    
    - name: Importar Monitor Existente
      run: |
        RESOURCE_PATH="${{ github.event.inputs.monitor_resource_path }}"
        MONITOR_ID="${{ github.event.inputs.monitor_id }}"
        
        echo "Importando monitor con ID: ${MONITOR_ID} al recurso ${RESOURCE_PATH}..."
        
        terraform import -var-file=${{ env.INFRA_PARAMETERS }} ${RESOURCE_PATH} ${MONITOR_ID}
      env:
        TF_VAR_datadog_api_key: ${{ secrets.DATADOG_SERVICE_API_KEY }}
        TF_VAR_datadog_app_key: ${{ secrets.DATADOG_SERVICE_APP_KEY }}
        TF_VAR_datadog_api_url: "https://api.us5.datadoghq.com/"

  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    needs: [import_monitor]
    if: ${{ always() && (needs.import_monitor.result == 'success' || needs.import_monitor.result == 'skipped') }}
    defaults:
      run:
        working-directory: ./terraform

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: ${{ github.ref }}

    - name: Prepare
      run: |
        echo "Preparando el ambiente..."
        pwd && ls -la

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.11.4

    - name: Initialize
      id: init
      run: |
        # Inicializar Terraform con reintentos
        initSuccessful=false
        retryCount=0
        
        while [ "$initSuccessful" != "true" ] && [ $retryCount -lt ${{ env.MAX_RETRIES }} ]; do
          echo "Intento $(($retryCount + 1)) de inicializar Terraform..."
          
          # Limpiar cualquier estado previo si existe
          rm -rf .terraform || true
          
          if terraform init -input=false; then
            initSuccessful=true
            echo "Terraform inicializado correctamente"
          else
            retryCount=$((retryCount + 1))
            
            if [ $retryCount -lt ${{ env.MAX_RETRIES }} ]; then
              echo "Intento $retryCount falló. Esperando ${{ env.RETRY_INTERVAL }} segundos antes de reintentar..."
              sleep ${{ env.RETRY_INTERVAL }}
            else
              echo "Error inicializando Terraform después de ${{ env.MAX_RETRIES }} intentos"
              exit 1
            fi
          fi
        done
      env:
        TF_VAR_datadog_api_key: ${{ secrets.DATADOG_SERVICE_API_KEY }}
        TF_VAR_datadog_app_key: ${{ secrets.DATADOG_SERVICE_APP_KEY }}
        TF_VAR_datadog_api_url: "https://api.us5.datadoghq.com/"

    - name: Plan
      id: plan
      run: |
        terraform plan -var-file=${{ env.INFRA_PARAMETERS }}
      env:
        TF_VAR_datadog_api_key: ${{ secrets.DATADOG_SERVICE_API_KEY }}
        TF_VAR_datadog_app_key: ${{ secrets.DATADOG_SERVICE_APP_KEY }}
        TF_VAR_datadog_api_url: "https://api.us5.datadoghq.com/"

    - name: Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        applySuccessful=false
        retryCount=0
        
        while [ "$applySuccessful" != "true" ] && [ $retryCount -lt ${{ env.MAX_RETRIES }} ]; do
          echo "Intento $(($retryCount + 1)) de aplicar cambios..."
          
          if terraform apply -var-file=${{ env.INFRA_PARAMETERS }} -auto-approve; then
            applySuccessful=true
            echo "Apply ejecutado exitosamente"
          else
            retryCount=$((retryCount + 1))
            
            if [ $retryCount -lt ${{ env.MAX_RETRIES }} ]; then
              echo "Intento $retryCount de apply falló. Esperando ${{ env.RETRY_INTERVAL }} segundos antes de reintentar..."
              sleep ${{ env.RETRY_INTERVAL }}
              
              terraform init -input=false
            else
              echo "Error terraform applying cambios después de ${{ env.MAX_RETRIES }} intentos"
              exit 1
            fi
          fi
        done
      env:
        TF_VAR_datadog_api_key: ${{ secrets.DATADOG_SERVICE_API_KEY }}
        TF_VAR_datadog_app_key: ${{ secrets.DATADOG_SERVICE_APP_KEY }}
        TF_VAR_datadog_api_url: "https://api.us5.datadoghq.com/"