name: 'Datadog Terraform CI/CD'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Importante para tener acceso al historial completo

    # Configuración de Git para manejar el estado
    - name: Setup Git
      run: |
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions@github.com"

    # Verificar y crear rama para el estado si no existe - CORREGIDO
    - name: Setup State Branch
      run: |
        # Crear directorio para estado siempre
        mkdir -p terraform-state
        
        # Verificar si la rama existe de manera más robusta
        if git fetch origin terraform-state 2>/dev/null; then
          echo "La rama terraform-state existe, recuperando estado..."
          
          # Crear una rama local temporal
          git checkout -b temp-state-branch origin/terraform-state
          
          # Copiar los archivos de estado si existen
          if [ -f "terraform-state/terraform.tfstate" ]; then
            cp terraform-state/terraform.tfstate* ./ || echo "Error copiando archivos de estado"
          else
            echo "No se encontraron archivos de estado en la rama"
          fi
          
          # Volver a la rama principal
          git checkout ${{ github.ref_name }}
          git branch -D temp-state-branch
        else
          echo "La rama terraform-state no existe, se creará después del despliegue"
        fi

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.0.0

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init
      env:
        TF_VAR_datadog_api_key: ${{ secrets.DATADOG_SERVICE_API_KEY }}
        TF_VAR_datadog_app_key: ${{ secrets.DATADOG_SERVICE_APP_KEY}}

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color
      env:
        TF_VAR_datadog_api_key: ${{ secrets.DATADOG_SERVICE_API_KEY }}
        TF_VAR_datadog_app_key: ${{ secrets.DATADOG_SERVICE_APP_KEY }}
        TF_VAR_datadog_api_url: "https://api.us5.datadoghq.com/"
        TF_VAR_environment: ${{ github.head_ref == 'main' && 'prod' || 'dev' }}
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Formato de Terraform: \`${{ steps.fmt.outcome }}\`
          #### Validación de Terraform: \`${{ steps.validate.outcome }}\`
          #### Plan de Terraform: \`${{ steps.plan.outcome }}\`
          
          <details><summary>Mostrar Plan</summary>
          
          \`\`\`
          ${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}
          \`\`\`
          
          </details>`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
      env:
        TF_VAR_datadog_api_key: ${{ secrets.DATADOG_SERVICE_API_KEY }}
        TF_VAR_datadog_app_key: ${{ secrets.DATADOG_SERVICE_APP_KEY }}
        TF_VAR_datadog_api_url: "https://api.us5.datadoghq.com/"
        TF_VAR_environment: 'prod'

    # Guardar el estado de Terraform después de aplicar - MEJORADO
    - name: Save Terraform State
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        # Copiar archivos de estado
        cp terraform.tfstate* terraform-state/ || echo "No hay archivos de estado para copiar"
        
        # Crear o cambiar a la rama de estado - MEJORADO
        echo "Intentando crear/actualizar la rama terraform-state..."
        
        # Crear una nueva rama desde cero (sin historia)
        git checkout --orphan terraform-state-new
        
        # Limpiar el directorio de trabajo excepto terraform-state
        find . -not -path "./terraform-state*" -not -path "./.git*" -delete
        
        # Mover los archivos de estado al directorio raíz
        mkdir -p terraform-state
        mv terraform-state/* . || echo "No hay archivos que mover"
        
        # Añadir y commitear
        git add terraform.tfstate*
        git commit -m "Update Terraform state [skip ci]" || echo "No hay cambios que commitear"
        
        # Forzar push a la rama de estado
        git push -f origin terraform-state-new:terraform-state
        
        # Volver a la rama original
        git checkout ${{ github.ref_name }}