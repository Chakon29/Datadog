name: 'Datadog Terraform CI/CD'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Importante para tener acceso al historial completo

    # Configuraci√≥n de Git para manejar el estado
    - name: Setup Git
      run: |
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions@github.com"

    # Mejorado: Recuperar el estado anterior de forma m√°s robusta
    - name: Fetch Terraform State
      run: |
        echo "Verificando si existe la rama terraform-state..."
        
        # Primero intentar hacer fetch para verificar si realmente existe
        if git fetch origin terraform-state:terraform-state-temp 2>/dev/null; then
          echo "La rama terraform-state existe y es accesible."
          
          # Ahora podemos trabajar con la rama local
          git checkout terraform-state-temp
          
          # Crear directorio para el estado
          mkdir -p terraform-state
          
          # Verificar si hay archivos de estado
          if [ -f "terraform.tfstate" ]; then
            echo "Copiando archivos de estado..."
            cp terraform.tfstate* terraform-state/
            git checkout ${{ github.ref_name }}
            cp terraform-state/terraform.tfstate* ./
            echo "Estado recuperado correctamente."
            
            # Mostrar informaci√≥n del estado
            echo "Contenido del estado:"
            grep -o '"resources": \[[^]]*\]' terraform.tfstate | head -20 || echo "No se pudo examinar el contenido del estado"
          else
            echo "No se encontraron archivos de estado en la rama."
            git checkout ${{ github.ref_name }}
          fi
          
          # Limpiar la rama temporal
          git branch -D terraform-state-temp
        else
          echo "La rama terraform-state no existe o no es accesible."
          echo "Se crear√° una nueva rama de estado despu√©s del despliegue."
          mkdir -p terraform-state
        fi

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.0.0

    # Modificado para no fallar en caso de error
    - name: Terraform Format
      run: terraform fmt -check || true
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init
      env:
        TF_VAR_datadog_api_key: ${{ secrets.DATADOG_SERVICE_API_KEY }}
        TF_VAR_datadog_app_key: ${{ secrets.DATADOG_SERVICE_APP_KEY}}

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    # A√±adir este paso para ver el estado
    - name: Check Terraform State
      run: |
        echo "Comprobando el estado de Terraform..."
        if [ -f "terraform.tfstate" ]; then
          echo "El archivo de estado existe."
          terraform state list || echo "No hay recursos en el estado"
        else
          echo "No existe el archivo de estado."
        fi

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color
      env:
        TF_VAR_datadog_api_key: ${{ secrets.DATADOG_SERVICE_API_KEY }}
        TF_VAR_datadog_app_key: ${{ secrets.DATADOG_SERVICE_APP_KEY }}
        TF_VAR_datadog_api_url: "https://api.us5.datadoghq.com/"
        TF_VAR_environment: ${{ github.head_ref == 'main' && 'prod' || 'dev' }}
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Formato de Terraform: \`${{ steps.fmt.outcome }}\`
          #### Validaci√≥n de Terraform: \`${{ steps.validate.outcome }}\`
          #### Plan de Terraform: \`${{ steps.plan.outcome }}\`
          
          <details><summary>Mostrar Plan</summary>
          
          \`\`\`
          ${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}
          \`\`\`
          
          </details>`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
      env:
        TF_VAR_datadog_api_key: ${{ secrets.DATADOG_SERVICE_API_KEY }}
        TF_VAR_datadog_app_key: ${{ secrets.DATADOG_SERVICE_APP_KEY }}
        TF_VAR_datadog_api_url: "https://api.us5.datadoghq.com/"
        TF_VAR_environment: 'prod'

    # Mejorado: Guardar el estado de forma m√°s robusta
    - name: Save Terraform State
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        if [ ! -f "terraform.tfstate" ]; then
          echo "‚ö†Ô∏è No hay archivo de estado para guardar. Algo sali√≥ mal."
          exit 1
        fi
        
        echo "üìù Guardando el estado actualizado de Terraform..."
        
        # Copiar archivos de estado al directorio de estado
        mkdir -p terraform-state
        cp terraform.tfstate* terraform-state/ || echo "Error copiando archivos de estado"
        
        # Crear una rama nueva desde cero
        git checkout --orphan temp-terraform-state
        git rm -rf .
        
        # A√±adir solo los archivos de estado
        mv terraform-state/* .
        git add terraform.tfstate*
        
        # Crear el commit y publicar la rama
        git commit -m "Update Terraform state [skip ci]" || echo "No hay cambios que commitear"
        git push -f origin temp-terraform-state:terraform-state
        
        echo "‚úÖ Estado guardado correctamente en la rama terraform-state"