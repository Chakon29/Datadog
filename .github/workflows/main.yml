name: 'Datadog Terraform CI/CD'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      create_monitor:
        description: 'Crear nuevo monitor'
        required: false
        default: false
        type: boolean
      monitor_number:
        description: 'Número del nuevo monitor'
        required: false
        type: string
      monitor_name:
        description: 'Nombre del recurso para el nuevo monitor'
        required: false
        type: string
      monitor_title:
        description: 'Título para el nuevo monitor'
        required: false
        type: string
      monitor_query:
        description: 'Query para el nuevo monitor'
        required: false
        type: string
      critical_threshold:
        description: 'Valor crítico para el nuevo monitor'
        required: false
        default: '90'
        type: string
      warning_threshold:
        description: 'Valor de advertencia para el nuevo monitor'
        required: false
        default: '80'
        type: string
      import_monitor:
        description: 'Importar monitor existente'
        required: false
        default: false
        type: boolean
      import_monitor_number:
        description: 'Número del monitor a importar'
        required: false
        type: string
      import_monitor_id:
        description: 'ID real del monitor en Datadog a importar'
        required: false
        type: string

env:
  INFRA_PARAMETERS: "monitors.tfvars"
  MAX_RETRIES: 5
  RETRY_INTERVAL: 30
  PROJECT_ID: "ancient-tractor-452505-b5"

jobs:
  create_monitor:
    name: 'Crear Nuevo Monitor'
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.create_monitor == 'true' }}
    defaults:
      run:
        working-directory: ./terraform
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Crear Estructura para Nuevo Monitor
      run: |
        MONITOR_NUM="${{ github.event.inputs.monitor_number }}"
        MONITOR_NAME="${{ github.event.inputs.monitor_name }}"
        MONITOR_TITLE="${{ github.event.inputs.monitor_title }}"
        MONITOR_QUERY="${{ github.event.inputs.monitor_query }}"
        CRITICAL="${{ github.event.inputs.critical_threshold }}"
        WARNING="${{ github.event.inputs.warning_threshold }}"
        
        # Crear directorio para el nuevo monitor
        mkdir -p "./monitors/${MONITOR_NUM}_monitor"
        
        # Copiar archivos base del primer monitor
        cp ./monitors/1_monitor/variables.tf "./monitors/${MONITOR_NUM}_monitor/"
        cp ./monitors/1_monitor/provider.tf "./monitors/${MONITOR_NUM}_monitor/"
        cp ./monitors/1_monitor/output.tf "./monitors/${MONITOR_NUM}_monitor/"
      
    - name: Crear Archivo main.tf
      run: |
        MONITOR_NUM="${{ github.event.inputs.monitor_number }}"
        MONITOR_NAME="${{ github.event.inputs.monitor_name }}"
        MONITOR_TITLE="${{ github.event.inputs.monitor_title }}"
        MONITOR_QUERY="${{ github.event.inputs.monitor_query }}"
        CRITICAL="${{ github.event.inputs.critical_threshold }}"
        WARNING="${{ github.event.inputs.warning_threshold }}"
        PROJECT_ID="${{ env.PROJECT_ID }}"
        
        # Escribir el contenido línea por línea
        echo 'resource "datadog_monitor" "'$MONITOR_NAME'" {' > "./monitors/${MONITOR_NUM}_monitor/main.tf"
        echo '  include_tags = false' >> "./monitors/${MONITOR_NUM}_monitor/main.tf"
        echo '  new_group_delay = 60' >> "./monitors/${MONITOR_NUM}_monitor/main.tf"
        echo '  notify_audit = true' >> "./monitors/${MONITOR_NUM}_monitor/main.tf"
        echo '  require_full_window = false' >> "./monitors/${MONITOR_NUM}_monitor/main.tf"
        echo '  monitor_thresholds {' >> "./monitors/${MONITOR_NUM}_monitor/main.tf"
        echo '    critical = '$CRITICAL >> "./monitors/${MONITOR_NUM}_monitor/main.tf"
        echo '    warning = '$WARNING >> "./monitors/${MONITOR_NUM}_monitor/main.tf"
        echo '  }' >> "./monitors/${MONITOR_NUM}_monitor/main.tf"
        echo '  name = "'$MONITOR_TITLE'"' >> "./monitors/${MONITOR_NUM}_monitor/main.tf"
        echo '  type = "query alert"' >> "./monitors/${MONITOR_NUM}_monitor/main.tf"
        echo '  query = <<EOT' >> "./monitors/${MONITOR_NUM}_monitor/main.tf"
        echo "$MONITOR_QUERY" >> "./monitors/${MONITOR_NUM}_monitor/main.tf"
        echo 'EOT' >> "./monitors/${MONITOR_NUM}_monitor/main.tf"
        echo '  message = <<EOT' >> "./monitors/${MONITOR_NUM}_monitor/main.tf"
        echo '@team-teleton ' >> "./monitors/${MONITOR_NUM}_monitor/main.tf"
        echo 'ALERTA: '$MONITOR_TITLE' en {{host.name}} - {{value}}%' >> "./monitors/${MONITOR_NUM}_monitor/main.tf"
        echo '' >> "./monitors/${MONITOR_NUM}_monitor/main.tf"
        echo 'Detalles:' >> "./monitors/${MONITOR_NUM}_monitor/main.tf"
        echo '- Host: {{host.name}}' >> "./monitors/${MONITOR_NUM}_monitor/main.tf"
        echo '- Valor: {{value}}%' >> "./monitors/${MONITOR_NUM}_monitor/main.tf"
        echo '- Proyecto: '$PROJECT_ID >> "./monitors/${MONITOR_NUM}_monitor/main.tf"
        echo '- Timestamp: {{last_triggered_at}}' >> "./monitors/${MONITOR_NUM}_monitor/main.tf"
        echo 'EOT' >> "./monitors/${MONITOR_NUM}_monitor/main.tf"
        echo '}' >> "./monitors/${MONITOR_NUM}_monitor/main.tf"
        
        cat "./monitors/${MONITOR_NUM}_monitor/main.tf"
    
    - name: Actualizar monitors.tfvars
      run: |
        MONITOR_NUM="${{ github.event.inputs.monitor_number }}"
        # Crear archivo temporal
        echo 'monitor_params = [' > monitors.tfvars.new
        # Extraer los monitores existentes del archivo original
        grep -o '{[^}]*}' monitors.tfvars | while read line; do
          echo "	$line," >> monitors.tfvars.new
        done
        # Añadir el nuevo monitor
        echo '	{' >> monitors.tfvars.new
        echo '		"monitor_id":"'$MONITOR_NUM'",' >> monitors.tfvars.new
        echo '		"monitor_path": "./monitors/'$MONITOR_NUM'_monitor/main.tf"' >> monitors.tfvars.new
        echo '	}' >> monitors.tfvars.new
        echo '    ]' >> monitors.tfvars.new
        # Reemplazar el archivo original
        mv monitors.tfvars.new monitors.tfvars
        
        cat monitors.tfvars
    
    - name: Actualizar main.tf
      run: |
        MONITOR_NUM="${{ github.event.inputs.monitor_number }}"
        # Añadir el nuevo módulo al final del archivo
        echo '' >> main.tf
        echo 'module "monitor_'$MONITOR_NUM'" {' >> main.tf
        echo '	source = "./monitors/'$MONITOR_NUM'_monitor"' >> main.tf
        echo '	providers = {' >> main.tf
        echo '		datadog = datadog' >> main.tf
        echo '	}' >> main.tf
        echo '	monitor_params = [var.monitor_params['$(($MONITOR_NUM - 1))']' >> main.tf
        echo '}' >> main.tf
        
        cat main.tf
    
    - name: Configurar Git
      run: |
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions@github.com"
    
    - name: Commit y Push de los cambios
      run: |
        MONITOR_NUM="${{ github.event.inputs.monitor_number }}"
        git add "./monitors/${MONITOR_NUM}_monitor/" monitors.tfvars main.tf
        git commit -m "Añadir monitor ${MONITOR_NUM}: ${{ github.event.inputs.monitor_title }}"
        git push origin ${GITHUB_REF#refs/heads/}

  import_monitor:
    name: 'Importar Monitor Existente'
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.import_monitor == 'true' }}
    defaults:
      run:
        working-directory: ./terraform
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
    
    - name: Initialize
      run: |
        terraform init -input=false
      env:
        TF_VAR_datadog_api_key: ${{ secrets.DATADOG_SERVICE_API_KEY }}
        TF_VAR_datadog_app_key: ${{ secrets.DATADOG_SERVICE_APP_KEY }}
        TF_VAR_datadog_api_url: "https://api.us5.datadoghq.com/"
    
    - name: Importar Monitor Existente
      run: |
        MONITOR_NUM="${{ github.event.inputs.import_monitor_number }}"
        MONITOR_ID="${{ github.event.inputs.import_monitor_id }}"
        
        # Obtener el nombre del recurso del monitor desde main.tf
        RESOURCE_NAME=$(grep -o "datadog_monitor\.[^ ]*" "./monitors/${MONITOR_NUM}_monitor/main.tf" | sed 's/datadog_monitor\.//')
        
        echo "Importando monitor ${MONITOR_NUM} (ID: ${MONITOR_ID}) al recurso ${RESOURCE_NAME}..."
        
        terraform import -var-file=${{ env.INFRA_PARAMETERS }} module.monitor_${MONITOR_NUM}.datadog_monitor.${RESOURCE_NAME} ${MONITOR_ID}
      env:
        TF_VAR_datadog_api_key: ${{ secrets.DATADOG_SERVICE_API_KEY }}
        TF_VAR_datadog_app_key: ${{ secrets.DATADOG_SERVICE_APP_KEY }}
        TF_VAR_datadog_api_url: "https://api.us5.datadoghq.com/"

  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    needs: [create_monitor, import_monitor]
    if: ${{ always() && (needs.create_monitor.result == 'success' || needs.create_monitor.result == 'skipped') && (needs.import_monitor.result == 'success' || needs.import_monitor.result == 'skipped') }}
    defaults:
      run:
        working-directory: ./terraform

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: ${{ github.ref }}

    - name: Prepare
      run: |
        echo "Preparando el ambiente..."
        pwd && ls -la

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    - name: Initialize
      id: init
      run: |
        # Inicializar Terraform con reintentos
        initSuccessful=false
        retryCount=0
        
        while [ "$initSuccessful" != "true" ] && [ $retryCount -lt ${{ env.MAX_RETRIES }} ]; do
          echo "Intento $(($retryCount + 1)) de inicializar Terraform..."
          
          # Limpiar cualquier estado previo si existe
          rm -rf .terraform || true
          
          if terraform init -input=false; then
            initSuccessful=true
            echo "Terraform inicializado correctamente"
          else
            retryCount=$((retryCount + 1))
            
            if [ $retryCount -lt ${{ env.MAX_RETRIES }} ]; then
              echo "Intento $retryCount falló. Esperando ${{ env.RETRY_INTERVAL }} segundos antes de reintentar..."
              sleep ${{ env.RETRY_INTERVAL }}
            else
              echo "Error inicializando Terraform después de ${{ env.MAX_RETRIES }} intentos"
              exit 1
            fi
          fi
        done
      env:
        TF_VAR_datadog_api_key: ${{ secrets.DATADOG_SERVICE_API_KEY }}
        TF_VAR_datadog_app_key: ${{ secrets.DATADOG_SERVICE_APP_KEY }}
        TF_VAR_datadog_api_url: "https://api.us5.datadoghq.com/"

    - name: Plan
      id: plan
      run: |
        terraform plan -var-file=${{ env.INFRA_PARAMETERS }}
      env:
        TF_VAR_datadog_api_key: ${{ secrets.DATADOG_SERVICE_API_KEY }}
        TF_VAR_datadog_app_key: ${{ secrets.DATADOG_SERVICE_APP_KEY }}
        TF_VAR_datadog_api_url: "https://api.us5.datadoghq.com/"

    - name: Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        applySuccessful=false
        retryCount=0
        
        while [ "$applySuccessful" != "true" ] && [ $retryCount -lt ${{ env.MAX_RETRIES }} ]; do
          echo "Intento $(($retryCount + 1)) de aplicar cambios..."
          
          if terraform apply -var-file=${{ env.INFRA_PARAMETERS }} -auto-approve; then
            applySuccessful=true
            echo "Apply ejecutado exitosamente"
          else
            retryCount=$((retryCount + 1))
            
            if [ $retryCount -lt ${{ env.MAX_RETRIES }} ]; then
              echo "Intento $retryCount de apply falló. Esperando ${{ env.RETRY_INTERVAL }} segundos antes de reintentar..."
              sleep ${{ env.RETRY_INTERVAL }}
              
              terraform init -input=false
            else
              echo "Error terraform applying cambios después de ${{ env.MAX_RETRIES }} intentos"
              exit 1
            fi
          fi
        done
      env:
        TF_VAR_datadog_api_key: ${{ secrets.DATADOG_SERVICE_API_KEY }}
        TF_VAR_datadog_app_key: ${{ secrets.DATADOG_SERVICE_APP_KEY }}
        TF_VAR_datadog_api_url: "https://api.us5.datadoghq.com/"